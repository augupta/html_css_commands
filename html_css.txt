What Is HTML?

-HTML or HyperText Markup Language is used for creating web applications and websites.
-Consists of tags surrounding content. For Example: <p>Welcome to Simplilearn</p>
-HTML cannot be used in a CSS file.
-It is used to build the structure of the web pages.

What Is CSS?
-Cascading Style Sheets, fondly referred to as CSS, is a simple design language intended to simplify the process of making web pages presentable.
-CSS is designed to enable the separation of document content from document presentation, including elements such as font, layout, and colors.
-The style definitions are usually saved in external .css files.
-CSS is a style sheet language responsible for the presentation of documents written in a markup language.
-Consists of selectors succeeded by a declaration mark. For Example:
header{
background-color: green;
-CSS can be used in an HTML file.
-It is used to make web pages more presentable.


html_css.txt
html_css

<div class="hey">sup</div>

<div class="hey"> - opening tag
</div> - closing tag
div - element
class - attribute
hey- value
sup - content

----------------------

HTML Structure:-

<!DOCTYPE HTML>
<html>
 <head>
   stuff/configuration,Information abt page (links, meta, title)
   <title>doc<!title>
 </head>
 <body>
  stuff/configuration, what will be displayed on the page
 </body>
</html>

-html is white space collasping
-comment out <!----> or use ctrl+/

-<h2>2. Trading platforms</h2>
 <a href="https://www.binance.com/en"><img src="/binance.jpg" alt="binance" height="50px" width="100px"></a>
 <a> tag/element consists of leading url and source as image or para or line
 
- <h1 id="top"></h1>
 <a href="#top">Back to the top</a>
 this if for back to the top of page
 
 * use <span> element to prevent line break
 
-------------------------

CSS Structure:-

Ruleset 
.hey {
   background:blue;
   font_size:1em;
}

hey - selector
background:blue; - declaration, we can hav many declarations
background - property
blue - value



*colors
rgb -  rgb(255, 0, 0)
hex  -  #fc9; /* same as #ffcc99 */
hsl(hue, saturation, lightness),  hsla(hue, saturation, lightness, alpha), hsl(0, 100%, 50%, 0.3)

*background
   *background-color: green;
    opacity: 0.3;
    
   *background-image: url("paper.gif");
   *background-repeat: no-repeat; repeat-x; repeat-y
   *background-position: right top;
   *background-attachment: fixed; scroll;
   *background: #ffffff url("img_tree.png") no-repeat right top;

*border
    border-width
    
   *border-style:
    border-top-style:groove 
    border-style: dotted solid double dashed; 
    
   *border-color
   
   *border: 5px solid red;
   *border-left/right/top/bottom: ridge;
   *border-radius: 5px;

*margin
   *margin: top-bottom left-right; 20px 50px;
   *margin-top: 100px;
   *margin: 25px 0 75px 100px;

*padding
   *same as margin
   *padding: 25px 50px 75px 100px;

*height/width
   *max-width: 500px
   *div {
  height: 100px;
  width: 500px;
  background-color: powderblue;
}

*Box model
   *inner to outer
   *content-padding-border-margin
   * div {
  width: 320px;
  padding: 10px;
  border: 5px solid gray;
  margin: 0;
}

Here is the calculation:
320px (width)
+ 20px (left + right padding)
+ 10px (left + right border)
+ 0px (left + right margin)
= 350px

The total width of an element should be calculated like this:

Total element width = width + left padding + right padding + left border + right border + left margin + right margin


*outline
   *
    outline-style:
    outline-color:
    outline-width: thin/thick/medium/px/cm/em
    outline-offset:15px
    outline: same as border
    
 
 *text color
    * color: blue;
 
 *Text Alignment
    *text-align: right/center/justify
    *text-align-last: left
*The direction and unicode-bidi properties can be used to change the text direction of an element:
    *p {
  direction: rtl;
  unicode-bidi: bidi-override;
}


*vertical-align: baseline/text-top/text-bottom/sub/super;




*Icons


*links

/* unvisited link */
a:link {
  color: red;
}

/* visited link */
a:visited {
  color: green;
}

/* mouse over link */
a:hover {
  color: hotpink;
}

/* selected link */
a:active {
  color: blue;
} 
button:hover{
    background-color: blue;
    transition: 0.3s ease-out;
    cursor: pointer;
}

**table border
<style>
table, th, td{
  width: 100%;
  border: 1px solid;
  border-collapse: collapse;
  text-align: center;
  height: 50px;
  vertical-align: bottom;
}
</style>

**The overflow property specifies whether to clip the content or to add scrollbars when the content of an element is too big to fit in the specified area.

The overflow property has the following values:

    visible - Default. The overflow is not clipped. The content renders outside the element's box
    hidden - The overflow is clipped, and the rest of the content will be invisible
    scroll - The overflow is clipped, and a scrollbar is added to see the rest of the content
    auto - Similar to scroll, but it adds scrollbars only when necessary


A responsive table will display a horizontal scroll bar if the screen is too small to display the full content. Resize the browser window to see the effect:
To create a responsive table, add a container element (like div) with overflow-x:auto around the table element:
<div style="overflow-x: auto;">


**display: inline/outline/none/table;  to display in row/column/hide/table, usually used with links

**The position Property

The position property specifies the type of positioning method used for an element.

There are five different position values:

    static
    relative
    fixed
    absolute
    sticky


*div.relative/class {
  position: relative;
  width: 400px;
  height: 200px;
  border: 3px solid #73AD21;
}

*div.absolute {
  position: absolute;
  top: 80px;
  right: 0;
  width: 200px;
  height: 100px;
  border: 3px solid #73AD21;
}

** z-index - specifies the stack order
img {
  position: absolute;
  left: 50px;
  top: 50px;
  z-index: -1;
}

.green-box {
  position: absolute;
  z-index: 2; /* green box will be above black box */
  background: lightgreen;
  width: 35%;
  left: 270px;
  top: -15px;
  height: 100px;
}

div {
  overflow-x: hidden; /* Hide horizontal scrollbar */
  overflow-y: scroll; /* Add vertical scrollbar */
}

** float

    left - The element floats to the left of its container
    right - The element floats to the right of its container
    none - The element does not float (will be displayed just where it occurs in the text). This is default
    inherit - The element inherits the float value of its parent

img {
  float: left/right/none/inherit;
}

**clear

When we use the float property, and we want the next element below (not on right or left), we will have to use the clear property.
The clear property specifies what should happen with the element that is next to a floating element.

img {
  float: left/right/none/both/inherit;
}

**grid
<div class="grid-container">
  <div class="item1">1</div>

.grid-container {
  display: inline-grid/grid;
  grid-template-columns: auto auto auto;  to make 3 grid columns, write 4 number of autos to have 4 number of columns 
}
.grid-container {
  display: grid;
  column-gap/row-gap/gap: 50px;  to manage gaps b/w columns and rows
}
.item1 {
  grid-row/column-start: 1;  to expand row/column from 1 to 4 row/column line
  grid-row/column-end: 4;
}
or
.item1 {
  grid-column: 1 / 4 or 1/ span 3;  same as above 
}
.grid-container {
  display: grid;
  justify-content: end/start/center/space-evenly/space-between/space-around;
}
for grid style between items
.grid-container > div {
  background-color: rgba(255, 255, 255, 0.8);
  text-align: center;
  padding: 20px 0;
  font-size: 30px;
}

.item8 {
  grid-area: 1 / 2 / 5 / 6;
}
**All CSS Grid Properties
Property 	Description
column-gap 	Specifies the gap between the columns
gap 	A shorthand property for the row-gap and the column-gap properties
grid 	A shorthand property for the grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, and the grid-auto-flow properties
grid-area 	Either specifies a name for the grid item, or this property is a shorthand property for the grid-row-start, grid-column-start, grid-row-end, and grid-column-end properties
grid-auto-columns 	Specifies a default column size
grid-auto-flow 	Specifies how auto-placed items are inserted in the grid
grid-auto-rows 	Specifies a default row size
grid-column 	A shorthand property for the grid-column-start and the grid-column-end properties
grid-column-end 	Specifies where to end the grid item
grid-column-gap 	Specifies the size of the gap between columns
grid-column-start 	Specifies where to start the grid item
grid-gap 	A shorthand property for the grid-row-gap and grid-column-gap properties
grid-row 	A shorthand property for the grid-row-start and the grid-row-end properties
grid-row-end 	Specifies where to end the grid item
grid-row-gap 	Specifies the size of the gap between rows
grid-row-start 	Specifies where to start the grid item
grid-template 	A shorthand property for the grid-template-rows, grid-template-columns and grid-areas properties
grid-template-areas 	Specifies how to display columns and rows, using named grid items
grid-template-columns 	Specifies the size of the columns, and how many columns in a grid layout
grid-template-rows 	Specifies the size of the rows in a grid layout
row-gap 	Specifies the gap between the grid rows

**inline
display: inline/inline-block/block

**Adjacent Sibling Selector

The + selector is used to select an element that is directly after another specific element.
<div>
  <p>Paragraph 1 in the div.</p>
  <p>Paragraph 2 in the div.</p>
</div>

<p>Paragraph 3. After a div.</p>   -- this one only
<p>Paragraph 4. After a div.</p>

div + p {
  background-color: yellow;
}

**General Sibling Selector

The general sibling selector (~) selects all elements that are next siblings of a specified element.

div ~ p {
  background-color: yellow;
}
<div>
  <p>Paragraph 1 in the div.</p>
  <p>Paragraph 2 in the div.</p>
</div>

<p>Paragraph 3. After a div.</p>  - this
<p>Paragraph 4. After a div.</p>  - and this
--------------------
g
--------------------

VS Code
-open terminal from view bar
-open relevant directory
-write - code . OR click on open folder to open the directory to write code, here . means period
-create new .html file
- ! + enter - it gives html body to write code bcoz of EMMET extension

intsall live server - to see website
install live sass compiler - to easy code on css
- create .scss file and write css code
body{
    background: crimson;
}
like this in it
- in .html file, after <title> or before closing tag </head> write - link + enter
- under href tag write - "css/main.css" , it will add colour
- in body tag, write - .wrapper, it will automatically give the html code for
(<div class= 'wrapper'> </div>)

